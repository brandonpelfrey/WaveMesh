<html>
<head>
<title>Mesh Waves</title>
<script type="text/javascript" src="js/three.min.js"></script>
<script type="text/javascript" src="js/TrackballControls.js"></script>
<!--<script type="text/javascript" src="js/numeric.min.js"></script>-->
<script type="text/javascript" src="js/sparse.js"></script>
<!--<script type="text/javascript" src="js/dat.gui.min.js"></script>-->
<script type="text/javascript" src="js/stats.min.js"></script>
<style type="text/css">
body {
overflow: hidden;
					background-color: #bbb;
};
</style>
</head>
<body>

<script>

var camera, scene, renderer, stats, controls;
var geometry, material, mesh, faceAreas;

var simContext;
var laplacian, identity, averagingOperator;

var mouse2D = new THREE.Vector3( 0, 10000, 0.5 );
var ray, projector, mouse3D;

var lastSelectedFace = -1;

new THREE.JSONLoader().load( "models/sphere2.js", function( geometry ) { 
		window.geometry = geometry;
		init();

		setInterval(function() {
			animate();
			}, 1000 / 60.0);
		} );

function allFacesQuad() {
	for(var i=0; i<geometry.faces; ++i)
		if(!(geometry.faces[i] instanceof THREE.Face4))
			return false;
	return true;
}

/* Store a map. Keyed on edges, values are an array of faces sharing that edge. */ 
function EdgeToFaceMap(N) {
	this.store = {}; //  backing hash table. bad practice...
	this.N = N; 

	// Take two vertices
	this.add = function(va, vb, face) {
		// insure that va<vb
		if(vb<va) {
			var _tmp = va;
			va = vb;
			vb = _tmp;
		}

		var idx = va+'-'+vb;//(this.N * va) + vb;
		var entry = {vi:va, vj:vb, face:face};

		if(this.store[idx] === undefined) {
			this.store[idx] = [entry];
		} else {
			this.store[idx].push(entry);
		}
	};
}

/* Compute the circumcenter of a triangle. (Wikipedia) */
function circumcenter(A,B,C) {
	var a = (new THREE.Vector3).sub(A,C);
	var b = (new THREE.Vector3).sub(B,C);
	var acb = (new THREE.Vector3).cross(a,b);

	var num = b.clone().multiplyScalar(a.dot(a)).subSelf(a.clone().multiplyScalar(b.dot(b)));
	return C.clone().addSelf(num.crossSelf(acb).multiplyScalar(.5/(acb.dot(acb))));
}

/* Construct the Laplacian for the current mesh */
function buildWaveOperators() {
	var nFaces = geometry.faces.length, nVertices = geometry.vertices.length, i;

	// Build the identity operator
	var identity = new SparseMatrix(nFaces, nFaces);
	for(i=0; i<nFaces; ++i) {
		identity.accumulate(i,i,1.0);
	}

	// Build face area array (assumed triangles)
	faceAreas = new Array(nFaces);
	for(i=0;i<nFaces;++i) {
		var a = geometry.vertices[geometry.faces[i].a];
		var b = geometry.vertices[geometry.faces[i].b];
		var c = geometry.vertices[geometry.faces[i].c];
		var e0 = a.clone().subSelf(b);
		var e1 = a.clone().subSelf(c);
		faceAreas[i] = e0.crossSelf(e1).length() * .5;
	}

	// Construct another operator that assigns to a vertex
	// the average value of faces sharing that vertex
	averagingOperator = new SparseMatrix(nFaces, nFaces);
	for(i=0; i<nFaces; ++i) {
		averagingOperator.accumulate(i,i,1.0);
	}

	// Build the Laplacian and averaging operators for this mesh

	// 1. Get a map of edge -> faces sharing this edge
	// This is bad style using an object as a hash map, but it's the only native thing we have (read: speed)
	var edgeMap = new EdgeToFaceMap(nVertices);
	var face;
	for(i=0; i<nFaces; ++i) {
		face = geometry.faces[i];
		if(face instanceof THREE.Face3) {
			edgeMap.add(face.a, face.b, i);
			edgeMap.add(face.b, face.c, i);
			edgeMap.add(face.c, face.a, i);
		}
		else if(face instanceof THREE.Face4) {
			edgeMap.add(face.a, face.b, i);
			edgeMap.add(face.b, face.c, i);
			edgeMap.add(face.c, face.d, i);
			edgeMap.add(face.d, face.a, i);
		}
	}

	laplacian = new SparseMatrix(nFaces, nFaces);
	var L = laplacian, ea, eb, C, verts = geometry.vertices, faces = geometry.faces, r, midedge;
	for(edge in edgeMap.store) {
		// Not "proper" but since this is usually internally stored as a hash
		// it is the only way to get this kind of fast lookup that I'm aware of
		if(!edgeMap.store.hasOwnProperty(edge)) {
			continue;
		}

		if(edgeMap.store[edge].length != 2) {
			// If this is a boundary edge, then there is no flux across. 
			// (von Neumann Boundary Conditions)
			continue;
		}

		entry = edgeMap.store[edge][0];

		// Edge vertices
		ei = verts[entry.vi].clone();
		ej = verts[entry.vj].clone();

		// Faces sharing this edge
		i = edgeMap.store[edge][0].face;
		j = edgeMap.store[edge][1].face;

		// Midpoint on this edge
		midedge = ei.addSelf(ej).multiplyScalar(.5);

		// Compute relavent quantities for the laplacian here
		var ci = circumcenter(verts[faces[i].a], verts[faces[i].b], verts[faces[i].c]);
		var cj = circumcenter(verts[faces[j].a], verts[faces[j].b], verts[faces[j].c]);
		r = midedge.distanceTo(ci) + midedge.distanceTo(cj);
		r = ei.subSelf(ej).length() / r;

		// Because this is integrated over the face, we require a factor of inverse area
		var ri = r / faceAreas[i];
		var rj = r / faceAreas[j];

		// Since we computed this for the pair, and the Laplacian is symmetric,
		// accumulate these values for both faces
		L.accumulate(i,i,-ri);
		L.accumulate(j,j,-rj);
		L.accumulate(i,j, ri);
		L.accumulate(j,i, rj);

		averagingOperator.accumulate(i,j,1);
		averagingOperator.accumulate(j,i,1);
	}

	averagingOperator.normalizeRows();

	// Construct the solution state vectors
	simContext.solution = new Array(nFaces);
	simContext.oldSolution = new Array(nFaces);

	// Start a couple of bumps for the initial solution. 
	for(i=0; i<nFaces; ++i) {
		var fc = faces[i].centroid.clone();
		var r = 0;
		r += 2*Math.exp(-simContext.bumpSharpness*fc.distanceToSquared(new THREE.Vector3(1,0,0)));
		r += 2*Math.exp(-simContext.bumpSharpness*fc.distanceToSquared(new THREE.Vector3(0,1,0)));
		simContext.solution[i] = r;
		simContext.oldSolution[i] = r;
	}

	// Construct a new matrix that will help us to evolve the system over time
	identity.scale(2.0);
	laplacian.scale(simContext.timeStepSize * simContext.timeStepSize * simContext.omega);
	simContext.M = laplacian.add(identity);
}

// return v1*alpha + v2*beta
function linearVectorCombination(v1, alpha, v2, beta) {
	var result = new Array(v1.length), i;
	for(i=0; i<v1.length; ++i) {
		result[i] = v1[i] * alpha + v2[i] * beta;
	}
	return result;
}

function simUpdate() {
	// Simple time integration. Later maybe do solver for midpoint method etc.
	var nextState = simContext.M.multiply(simContext.solution);
	nextState = linearVectorCombination(nextState, 1, simContext.oldSolution, -1);
	simContext.oldSolution = simContext.solution;
	simContext.solution = nextState;
}

function addAxes() {
	var size = 2;
	var lineMaterial = new THREE.LineBasicMaterial({ color: 0x222222 });

	var xgeom = new THREE.Geometry(); 
	xgeom.vertices.push(new THREE.Vector3(-size,0,0));
	xgeom.vertices.push(new THREE.Vector3(size,0,0));
	scene.add( new THREE.Line(xgeom, lineMaterial));

	var zgeom = new THREE.Geometry(); 
	zgeom.vertices.push(new THREE.Vector3(0,0,-size));
	zgeom.vertices.push(new THREE.Vector3(0,0,size));
	scene.add( new THREE.Line(zgeom, lineMaterial));
}

function init() {

	// three.js
	camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, .1, 100 );
	camera.position = new THREE.Vector3(2.3,2.3,2.3);
	camera.lookAt(new THREE.Vector3(0,0,0));

	ray = new THREE.Ray( camera.position, null );
	projector = new THREE.Projector();

	scene = new THREE.Scene();

	geometry.computeFaceNormals();
	geometry.dynamic = true;

	material = new THREE.MeshBasicMaterial({color:0xffffff});
	material.vertexColors = THREE.FaceColors;

	mesh = new THREE.Mesh( geometry, material );
	mesh.rotation.y = 1;
	scene.add( mesh );
	addAxes();
	renderer = new THREE.WebGLRenderer();

	// Trackball controls
	controls = new THREE.TrackballControls(camera, renderer.domElement);

	renderer.setSize( window.innerWidth, window.innerHeight );
	document.body.appendChild( renderer.domElement );

	// Simulation 
	simContext = {
		timeStepSize: 1,
		omega: .0002,
		bumpSharpness: 100,
		colorScale: 1
	};
	buildWaveOperators();

	// stats bar
	stats = new Stats();
	stats.domElement.style.position = 'absolute';
	stats.domElement.style.left = '0px';
	stats.domElement.style.top = '0px';
	document.body.appendChild( stats.domElement );
}

function animate() {
	controls.update();
	stats.begin();

	// Update simulation
	simUpdate();

	// Fill in the new face colors
	full = simContext.solution;
	var col;
	for(var i=0; i<geometry.faces.length; ++i) {
		col = full[i];
		col = col * simContext.colorScale;
		col = col + .25;
		if(col<0.0) col = 0.0;
		if(col>1.0) col = 1.0;

		col = (col*255) & 0xff;
		col = col + (col<<8) + (col<<16);
		geometry.faces[i].color = new THREE.Color(col);
	}
	geometry.colorsNeedUpdate = true;

	renderer.render( scene, camera );

	stats.end();
}

</script>

</body>
</html>
